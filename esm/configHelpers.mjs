import{curry as e,map as r,mapObjIndexed as s,fromPairs as a,set as t,lensPath as o,addIndex as p,merge as i,ifElse as l,equals as u,always as d,keys as f,lensProp as m,head as n,view as y,__ as h}from"ramda";import{mergeDeep as R,findOneValueByParamsThrowing as c,reqPathThrowing as g,reqStrPathThrowing as q,strPathOr as $}from"rescape-ramda";import U from"prop-types";import{v as D}from"rescape-validate";const C=D(e((e,r)=>R(e,{styles:{default:r}})),[["defaultConfig",U.shape().isRequired],["styles",U.shape().isRequired]],"applyDefaultStyles"),K=D(e((e,s)=>r(r=>R(e,r),s)),[["defaultConfig",U.shape().isRequired],["regions",U.oneOfType([U.shape(),U.array]).isRequired]],"applyDefaultRegion"),S=D(e((e,a)=>s((s,a)=>r(r=>R(c({templateKey:a},e),r),s),a)),[["templateUsers",U.array.isRequired],["defaultUserKeyToUsers",U.shape().isRequired]],"mapDefaultUsers"),T=(...e)=>a(r(e=>[e,{id:e}],e)),j=e((e,s)=>r(s=>t(o(["regions"]),p(r)((e,r)=>i({id:e},l(u(0),d({isSelected:!0}),d({}))(r)),f(e)),s),s)),v=e((e,r)=>s((e,r)=>t(m("geojson"),g(),r),e)),x=e=>o(["users",n(f(y(o(["users"]),e)))]),O=e=>{const r=q(h,e),s=$(null,h,e);return`${r("protocol")}://${r("host")}${s("port")?":":""}${s("port")||""}${r("path")}`};export{K as applyDefaultRegion,C as applyDefaultStyles,j as applyRegionsToUsers,x as firstUserLens,T as keysAsIdObj,S as mapDefaultUsers,O as parseApiUrl,v as wrapLocationsWithFeatures};
//# sourceMappingURL=configHelpers.mjs.map
