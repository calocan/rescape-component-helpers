{"version":3,"file":"testHelpers.js","sources":["../src/testHelpers.js"],"sourcesContent":["/**\n * Created by Andy Likuski on 2017.06.06\n * Copyright (c) 2017 Andy Likuski\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {taskToPromise} from 'rescape-ramda';\n\n/**\n * Given a task, wraps it in promise and passes it to Jest's expect.\n * With this you can call resolves or rejects depending on whether success or failure is expected:\n * expectTask(task).resolves|rejects\n * @param {Task} task Task wrapped in a Promise and forked\n * @returns {undefined}\n */\nexport const expectTask = task => expect(taskToPromise(task));\n/**\n * Same as expectTask but expects a rejects so diables debugging\n * @param {Task} task The Task\n * @returns {undefined}\n */\nexport const expectTaskRejected = task => expect(taskToPromise(task, true));\n\n/**\n * Converts an Result to a Promise. Result.Ok calls resolve and Result.Left calls reject\n * @param {Object} result The result\n * @returns {Promise} The promise\n */\nexport const resultToPromise = result => {\n  return new Promise((resolve, reject) => result.map(resolve).mapError(reject));\n};\n"],"names":["expectTask","task","expect","taskToPromise","expectTaskRejected","resultToPromise","result","Promise","resolve","reject","map","mapError"],"mappings":";;AAAA;;;;;;;;;;AAWA,AAEA;;;;;;;;AAOA,IAAaA,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI;SAAIC,MAAM,CAACC,aAAa,CAACF,IAAD,CAAd,CAAV;CAAvB;;;;;;;AAMP,IAAaG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAH,IAAI;SAAIC,MAAM,CAACC,aAAa,CAACF,IAAD,EAAO,IAAP,CAAd,CAAV;CAA/B;;;;;;;AAOP,IAAaI,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,MAAM,EAAI;SAChC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;WAAqBH,MAAM,CAACI,GAAP,CAAWF,OAAX,EAAoBG,QAApB,CAA6BF,MAA7B,CAArB;GAAZ,CAAP;CADK;;;;"}